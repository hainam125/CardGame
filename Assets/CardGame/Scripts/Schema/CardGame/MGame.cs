// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CardGame
{

using global::System;
using global::FlatBuffers;

public struct MGame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MGame GetRootAsMGame(ByteBuffer _bb) { return GetRootAsMGame(_bb, new MGame()); }
  public static MGame GetRootAsMGame(ByteBuffer _bb, MGame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MGame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int GameState { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public MCard? Cards(int j) { int o = __p.__offset(6); return o != 0 ? (MCard?)(new MCard()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CardsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<MGame> CreateMGame(FlatBufferBuilder builder,
      int gameState = 0,
      VectorOffset cardsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    MGame.AddCards(builder, cardsOffset);
    MGame.AddGameState(builder, gameState);
    return MGame.EndMGame(builder);
  }

  public static void StartMGame(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddGameState(FlatBufferBuilder builder, int gameState) { builder.AddInt(0, gameState, 0); }
  public static void AddCards(FlatBufferBuilder builder, VectorOffset cardsOffset) { builder.AddOffset(1, cardsOffset.Value, 0); }
  public static VectorOffset CreateCardsVector(FlatBufferBuilder builder, Offset<MCard>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartCardsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MGame> EndMGame(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MGame>(o);
  }
  public static void FinishMGameBuffer(FlatBufferBuilder builder, Offset<MGame> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMGameBuffer(FlatBufferBuilder builder, Offset<MGame> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
